require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LivesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Life. As you add validations to Life, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
        name: "test",
        width: 10,
        height: 10
    }
  }

  let(:invalid_attributes) {
    {
        width: -10,
        height: -10
    }
  }

  describe "GET #edit" do
    it "assigns the requested life as @life" do
      life = Life.create! valid_attributes
      get :cycle, {:id => life.to_param}
      expect(assigns(:life)).to eq(life)
      expect(response).to render_template("show")
    end
  end


end
